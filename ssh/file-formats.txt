Brendan Banfield (worked alone)

Private key

-----BEGIN RSA PRIVATE KEY-----
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
-----END RSA PRIVATE KEY-----

I'd expect the private key to be ASN.1 encoded and contain: a version number of 0 (since multi-prime is not being used), the modulus, the public key, the private key, the two primes used to generate the keys, d mod (p - 1), d mod (q - 1), and q^(-1) mod p
Using an online decoder I got:

PrivateKeyInfo SEQUENCE (9 elem)
  version Version INTEGER 0
  privateKeyAlgorithm AlgorithmIdentifier [?] INTEGER (3072 bit) 329257889910002194936633532099854250414606461090990961643610299019322…
  privateKey PrivateKey [?] INTEGER 65537
  INTEGER (3070 bit) 137881168799839102170353219886696827372379984152642041088668429306129…
  INTEGER (1536 bit) 185527955273339150712991793663726907608786211075131239726224695313278…
  INTEGER (1536 bit) 177470769526298665206350014093075981887188910311114734871622665740420…
  INTEGER (1536 bit) 142804182427691128030225232027201487012301759581381439308930905520215…
  INTEGER (1536 bit) 128316102568070895079159793975928184105534988099732543630191189955442…
  INTEGER (1535 bit) 103887499071698499675558891331454522339190838849269284525090498115773…

Integer 1: version number. Value: 0
Offset 4, length 1 (byte) integer
Integer 2: modulus (n). Value: 0x0091165afcd1a61affd8f35ef32aa096141b0bf20b208aaa9b4228cd34a5d38bf33905758fc46f667c63815da0c3603743cf99a80b25841a36d4b3c68a8d2dcce846bbd3ad1b403d8573b219e4cce6f60a194938202d350b01f41ad5b7559622c6aba79f50e4765bc2078d6c5ed75a20a3bd237f0f1092870ea0d01b0a53d4c8ff13a7c540d69c2023fdd157dbf0bffdb09e92d3a50c7662ecbc352fff304dc6595642470726b2617ff06d90b146f2c80ab6c9ba9aff232f2d3da8c3f662c0666ab0a550e905051850dadb5323a280514f661e88d09d21480d7378bc866e317f812e81bf5583e3fcb53810182bf9948a92b7a84de842b873f41352804acc1b0bb5f3e0c92bc233f41ce3ecef1da1909c17241806730a55d7a3faf44c09091a2c470a479ac98b48ad7aa7be71df8773f90de812ebaf6575cd7668a0c1b2f0095e8f4fa8f8a5857666ca56d6e3f7ed1296ffcc1c3af3a863e61a7ee88de4731c256ff9079ec8e4d8b0961e161aabed7cd930b3f52a4d6373167dabec2ec0bfec4123
Offset 7, length 385 integer
Integer 3: public key (e). Value: 65537
Offset 396, length 3 integer
Integer 4: private key (d). Value: 0x3cc1dc5b781df3bb856a312e6a80f2283c454dd87c09a5b53bc8e35a33413a1fa216d7aadb6b7d4304d675536fcdd886d4a67799275e412e09f7b8e26789b0ffea3318cb2a98c5ca9f6f0b69e5a6a88d0516c4e2b09bc05ed28ef44580994d39de4365339660bc3f2e337a98e2dcf2c32edef103e9803aff94b761437b64a5c12fc5779495eaae88f3ef19385902c565939a4ff813967609c62d0dcaf33af69f8dc05687379cc6b8b181e8705c9229d456c4769916d3f09b24f18a12a13b0a07ed3a555ec9b374667a0f77e4589cc8c96d4611894008346cd8ed6afaf75ed8f8e92466206e333b44a5c9827dd0ea84aa22eb2d43258359ea51509dad3b8c412002461ac3c64b349b4088970d4dc5099cf4f033faa06b48043e05be9ce8d52d37d8dca940cec888aa7b5d753c62c0003c8e60ad5ececbbd87907a12f1ec6667a3010acf9285c1776d350f9d8347c1fd91af8f104e949d557b35d992619a84936497f7e555600a079fc0a971efa6e5ccecd2e4f301f485afade0619b306060edcd
Offset 401 length 384 integer
Integer 5: prime 1 (p). Value: 0x00c50cbf40db121b7354000329c948fbfd7a306db3c300524fc8941b1f19b9baf17fe39b7a3bc326c3e9191ac192f535f31e994d6efc56798fa47840ff21d18cdbbf0ad48b604760399d6d7761ca18d7f0104c801a7cd325df412cb425a947a02b0c4636e3bfd2ce745c22b361671355364dfd205561b24b77596d4a95159840dd88a23ff5159051a894b786dee3079300f6c9d7cd2c4e28a9c100df30636f0ef8f7e85c0ed15f99dcd6477ebc4b4e1a97572490e15a45f068be630230756c4965
Offset 789 length 193 integer
Integer 6: prime 2 (q). Value: 0x00bc7e02f04a937214a08d0ad4718a307eff8994aa9dfa64e0bb8949a831691d78f8e36ce1ba9ce94a32c50baf2e5e053906ffc94cfe2487f716caff05e185c0930ca070e281f00ed4833cf5786bd0da8431595a13c3d7825392b3528e97e7ded5709484b446f577ddf4dbfc0a2bd8e416729a40cb7dee544833132d6d14d6125a407f00fc9d799da7545a6e97e1e373eef71e84198fc5b4a138776ecbd2045524682fb5265ea495543487720eb737ad7b2f0b7cc34c586a174bee0a74ce40fbe7
Offset 985 length 193 integer
Integer 7: d mod (p-1). Value: 0x0097ac392665b9a9517b2dcb4185c2dcdbfe0a7ad66c59ba01d9654eff00613ae91ac48a6f6ac2cafaef58388519660f91c452c20c94c4c72aeeb0f56eac8c4c7cf4af146cf7bdd8ee6023db497532ec3bc77feaf6f86fda6ddf0fd6d64a576c8cd614d1b93a74bc1f4ab0171cf9272366fa5ec55d932696fa15e68f0af4254e8076e454908479a2b13d4f8acbd33a8847acae2ea2a9e0bb61f6c282090ff07338e6317f72946c9ed52246c3e191a15bcc73f21c66a982be0b11c8c9ed9ce4ae15
Offset 1181 length 193 integer
Integer 8: d mod (q-1). Value: 0x008848f024ff36d6a0356965302f9bc3eebf22a1bc2f1731431035766d46b482dbc9d0de13e3d2ba16acd8add70ec66a2e4e723901132c24a6b1f33a2aed61c0d851a3db9ada6a50beb4d9297ed52da0213e712560ef13ee263106b925628e031efe145452e88f6908b1973107c5a63f5c3fa66a3cf7a38f8ad86b0048436d78bd8aae896f1d0926c52a876c3922d94b24b7c677aae7ba021d236faf4b6d61369269463d4b2dd900236f0b939b323bee920774ddd3736ae5e24c43238a4aeacf77
Offset 1377 length 191 integer
Integer 9: q^(-1) mod p. Value: 0x6e56d73e667ff12ff276c023f891e8d7b1cb30ff37787aacbe97118f57cdba0d910be0bcc8a8bbe772ff3b1f5bc5084e7ff3f62cf16c371f597655f0abe70a8fe9f8f1f4cf8d2a70f205b622d458f416c3f544851de3a1c3a3f97804a3f5fed2b31ce84ccd75e71ebee166726a5e1244b4f74baa338983523d45308f4df0ee34ad6b22d4bad9bd19ceef5458cbd93e6565cbc3daaa5be52d765078474b0fc5e836f3b7a09cbe0d115018ed8a6c76d1461771387fa9d3b098a5bf7b2ca2de3eda	
Offset 1573 length 192 integer


-"PrivateKeyInfo SEQUENCE" defining the encoding being used and number of items in the sequence
-a Version of 0, as expected
-8 unlabeled integers-as expected, I hope
Integers are, in order, verion number (0), n (the modulus), public key, private key, p, q, d mod (p-1), d mod (q-1), q^-1 mod p
I'm not sure why the public key seems to be labeled private key? It's clearly the public key given how small it is.


Public key
public:
ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQCRFlr80aYa/9jzXvMqoJYUGwvyCyCKqptCKM00pdOL8zkFdY/Eb2Z8Y4FdoMNgN0PPmagLJYQaNtSzxoqNLczoRrvTrRtAPYVzshnkzOb2ChlJOCAtNQsB9BrVt1WWIsarp59Q5HZbwgeNbF7XWiCjvSN/DxCShw6g0BsKU9TI/xOnxUDWnCAj/dFX2/C//bCektOlDHZi7Lw1L/8wTcZZVkJHByayYX/wbZCxRvLICrbJupr/Iy8tPajD9mLAZmqwpVDpBQUYUNrbUyOigFFPZh6I0J0hSA1zeLyGbjF/gS6Bv1WD4/y1OBAYK/mUipK3qE3oQrhz9BNSgErMGwu18+DJK8Iz9Bzj7O8doZCcFyQYBnMKVdej+vRMCQkaLEcKR5rJi0iteqe+cd+Hc/kN6BLrr2V1zXZooMGy8Alej0+o+KWFdmbKVtbj9+0Slv/MHDrzqGPmGn7ojeRzHCVv+QeeyOTYsJYeFhqr7XzZMLP1Kk1jcxZ9q+wuwL/sQSM= kali@kali

I expect this to contain N and E and nothing else. Other information is not needed to encrypt and potentially dangerous to distribute. Also, network traffic should be kept to a minimum so extra information is not ideal.
Using 
ssh-keygen -e -f public.pub -m PKCS8
from the blog you linked us gives us a format readable by the other websites you linked us (Thanks!)
The public key file contains a 2-element sequence. The first element describes the encryption algorithm, and is itself a 2-element sequence.
The first is an Object Identifier specifying rsaEncryption. The second is a parameters object with a null value.
The second part ofthe sequence contais the actual data, and is once again a 2-element sequence. Both of these are integers. The first one is n, and the second is e (same values as above, though interestingly n is not in hexadacimal)
These integers are not explicitly named, though doubtless their format is specified (and their relative sizes makes it quite obvious).


Sanity Check
In base 10:
n = 3292578899100021949366335320998542504146064610909909616436102990193225200002979357828211677640377782403846184741019578786538561531881337170003363908727041965199173932264597445110130574941770556725504753673093379121327392562368079033852794993539869167301469975437185902201638811833966644110297252041365203707555322819924869126421593099295198713750423127424301389877377491322253095148666008619516985108315751201525284298552606431062434164933739354116292841405074328402648449086212111722842200447663059247178911181376146684222965870658989168458822207834331169717220525190951487170446833891326318957543405911249098304009409346759441271887514826149632195821316625111095817823998931440035574080945975587696394569632636724129771299128396920587664823268315002012483603920432752418915975746582757808803076401120659876950658496784374955031720213187308244853205572813338181958281988924757452918073288429803156683607256748729811036029219
p = 1855279552733391507129917936637269076087862110751312397262246953132787463528848997426239709312159942007084209511988868487112640934965904914474052382041024849278336404143169072592801486143782849837824452510073604649188926835285399466426664613445717824912508854193463418969040787784747827392696834800330683928017881506753000087079864335343595534717097986109524036649461669419070855367687243082514979352219064867155811373852342966057814977568127061568494893659867493
q = 1774707695262986652063500140930759818871889103111147348716226657404205960816996858072200220320534397943673487859192094764519267794155774943234062851093937311376563521440639003574681095711142379188893852777841593761186609742083327295121067319465446675961159969018370547148182011612641732893261321051415912811910937374706250892496331125980990642767035126870555557480296961529389793924644727739325248886558581207317051099431155703486259218727671634241923109089246183
Python tells me p * q == n and I'm going to choose to believe it.
Given p and q we can calculate lambda = lcm(p-1, q-1)
lambda = 1646289449550010974683167660499271252073032305454954808218051495096612600001489678914105838820188891201923092370509789393269280765940668585001681954363520982599586966132298722555065287470885278362752376836546689560663696281184039516926397496769934583650734987718592951100819405916983322055148626020682601853777661409962434563210796549647599356875211563712150694938688745661126547574333004309758492554157875600762642149276303215531217082466869677058146420702537162386330600544916976264712061439817082143713848659458200352874677666832782411306483354697200768511440287216627057994741791129708794917931774101566932584523624345929757844039719329333525170448043799196395264954400260532249498356109607019982230829234067925230474043647215401682432712939377358027163876086918006245048547143665889116303807538267241196408772758352390412636544632363329476260617375486554971590317957225947489817287309442864480193904280469155904143457772
e = 65537
d = 1378811687998391021703532198866968273723799841526420410886684293061293147405004302697962302012624136734704924197398596670692243342870704456446851714192888035978282939164681700143811565436157011215849294477641809104708326978316229687727131730170818611807150048688311160000806817086184866018967193091677179809146009996359736801197452001367274686047934563995853327044107703443758107173162706159243387671165473455456622441241237883902115971733890927324177165356082248290634303268534536371725595318219018596919441522636085862473689403768628313383303551520128369971534338236926355894737051944986588404265638473853050378136277472629788948250547847289132292914272488732943828647665836098000255050864400563342915726777679087354860457173077897721089600996833602465065504898528196969413761755476707626299642827226614004755804018084507337217255875700608688564765355800258111229091388897493503953203276439406571148560539095037893442334157
gcd(e, lambda) = 1 according to python
e*d mod lambda = 1 according to python

Sanity check complete!


